//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use serde::{
    Deserialize,
    Serialize,
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "days")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id:                   i32,
    pub days_date:            Option<Date>,
    pub last_update:          Option<DateTime>,
    #[sea_orm(column_type = "Decimal(Some((20, 15)))", nullable)]
    pub lat:                  Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 15)))", nullable)]
    pub long:                 Option<Decimal>,
    pub confirmed:            Option<i32>,
    pub deaths:               Option<i32>,
    pub recovered:            Option<i32>,
    pub active:               Option<i32>,
    pub fips:                 Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((25, 18)))", nullable)]
    pub incident_rate:        Option<Decimal>,
    pub total_test_results:   Option<i32>,
    pub people_hospitalized:  Option<i32>,
    #[sea_orm(column_type = "Decimal(Some((30, 20)))", nullable)]
    pub case_fatality_ratio:  Option<Decimal>,
    pub uid:                  Option<i32>,
    pub iso3:                 Option<String>,
    #[sea_orm(column_type = "Decimal(Some((25, 18)))", nullable)]
    pub testing_rate:         Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((25, 18)))", nullable)]
    pub hospitalization_rate: Option<Decimal>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
